apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'
apply plugin: 'kotlin-android-extensions'
apply plugin: "androidx.navigation.safeargs.kotlin"
apply plugin: 'jacoco'

jacoco {
    toolVersion = '0.8.5' //Use latest version
}
tasks.withType(Test) {
    jacoco.includeNoLocationClasses = true
}
task jacocoTestReport(type: JacocoReport, dependsOn: ['testDebugUnitTest']) {
    def coverageSourceDirs = [
            "src/main/java"
    ]
    def fileFilter = [
            '**/R.class',
            '**/R$*.class',
            '**/*$ViewInjector*.*',
            '**/*$ViewBinder*.*',
            '**/BuildConfig.*',
            '**/Manifest*.*'
    ]
    def javaClasses = fileTree(
            dir: "$buildDir/intermediates/classes/debug",
            excludes: fileFilter
    )
    def kotlinClasses = fileTree(
            dir: "$buildDir/tmp/kotlin-classes/debug",
            excludes: fileFilter
    )
    classDirectories = files([ javaClasses ], [ kotlinClasses ])
    additionalSourceDirs = files(coverageSourceDirs)
    sourceDirectories = files(coverageSourceDirs)
    executionData = fileTree(dir: "$buildDir", includes: [
            "jacoco/testDebugUnitTest.exec",
            "output/code-coverage/connected/*.ec"
    ])
    reports {
        xml.enabled = true
        html.enabled = true
    }
}

android {
    compileSdkVersion ApplicationConfig.compileSdk
    defaultConfig {
        applicationId ApplicationConfig.id
        minSdkVersion ApplicationConfig.minSdk
        targetSdkVersion ApplicationConfig.targetSdk
        versionCode ApplicationConfig.versionCode
        versionName ApplicationConfig.versionName
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }
    dataBinding {
        enabled = true
    }
    buildTypes {
        debug {
            buildConfigField "String", "API_KEY", '"cd57b59f089e4defb0f60ebb739f4da2"'
            buildConfigField "String", "SERVER_URL", '"https://newsapi.org/"'
            testCoverageEnabled true
        }
        release {
            buildConfigField "String", "API_KEY", '"cd57b59f089e4defb0f60ebb739f4da2"'
            buildConfigField "String", "SERVER_URL", '"https://newsapi.org/"'
            minifyEnabled false
            testCoverageEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    testOptions {
        execution 'ANDROID_TEST_ORCHESTRATOR'
        animationsDisabled true
        unitTests {
            includeAndroidResources = true
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_1_8.toString()
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    api AndroidXLibraries.design
    api AndroidXLibraries.cardview
    api AndroidXLibraries.recyclerview
    api AndroidXLibraries.navigation_fragment_ktx
    api AndroidXLibraries.navigation_ktx
    api AndroidXLibraries.navigation
    api AndroidXLibraries.navigation_fragment
    api AndroidXLibraries.paging
    api AndroidXLibraries.constraintLayout

    implementation AndroidXLibraries.appcompat
    implementation AndroidXLibraries.navigation_fragment_ktx
    implementation AndroidXLibraries.navigation_ktx
    implementation AndroidXLibraries.navigation
    implementation AndroidXLibraries.navigation_fragment

    implementation Libraries.room_ktx
    implementation Libraries.room_runtime
    kapt Libraries.room_compiler

    implementation Libraries.retrofit
    implementation Libraries.moshi
    implementation Libraries.moshiConverter
    implementation Libraries.loggingInterceptor

    api Libraries.glide
    kapt Libraries.glideCompiler

    implementation AndroidXLibraries.paging

    api Libraries.timber

    implementation Libraries.dagger
    kapt Libraries.daggerCompiler

    implementation Libraries.lifecycleExtensions
    kapt Libraries.lifecycleCompiler

    testImplementation TestLibraries.junit
    testImplementation TestLibraries.lifecycleTesting
    testImplementation TestLibraries.coroutine
    testImplementation TestLibraries.mockito


    androidTestImplementation TestLibraries.espresso_runner
    androidTestImplementation TestLibraries.espresso
    androidTestImplementation TestLibraries.espresso_runner
    androidTestImplementation TestLibraries.espresso

    implementation"org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"

}
